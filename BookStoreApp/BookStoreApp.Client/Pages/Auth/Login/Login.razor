@* @page "/login"
@using BookStore.Models.Feature.Login

<PageTitle>Login</PageTitle>
<MudGrid Justify="Justify.Center">
    <MudItem md="6" xs="12">
        <PostForm TRequest=UserLoginRequest
                  TResponse=UserLoginResponse
                  HttpClientName="Article.Api"
                  Endpoint="api/login"
                  DefaultModel=@(new UserLoginRequest {Email="admin.test@article.ie", Password="123456"})
                  SuccessCallBack=@(async user => await ExecuteLogin(user))
                  FailCallBack=@(user => LoginFail(user))
                  ButtonSubmitText="Login"
                  DisableFailDefaultMessage=true
                  DisableSuccessDefaultMessage=true>
            <HeaderTemplate>
                <MudElement HtmlTag="h1">Login</MudElement>
            </HeaderTemplate>
            <FormTemplate Context="model">
                @if (showFailMessage)
                {
                    <MudAlert Severity="Severity.Error"
                          ContentAlignment="HorizontalAlignment.Center"
                          Elevation="6"
                          ShowCloseIcon="true"
                          CloseIconClicked="(() => showFailMessage = false)">@failMessage</MudAlert>
                }
                <MudTextField id="login-email"
                              InputType="InputType.Text"
                              Label="Email"
                              Class="mt-3"
                              @bind-Value="model.Email"
                              For="@(() => model.Email)" />
                <MudTextField id="login-password"
                              InputType="InputType.Password"
                              Label="Password"
                              Class="mt-3"
                              @bind-Value="model.Password"
                              For="@(() => model.Password)" />
            </FormTemplate>
        </PostForm>
    </MudItem>
</MudGrid>

@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public string ReturnUrl
    {
        get => string.IsNullOrWhiteSpace(_returnUrl) ? "/" : _returnUrl;
        set => _returnUrl = value;
    }

    private string _returnUrl = string.Empty;
    private UserLoginResponse? loggedUser;
    private string failMessage = string.Empty;
    private bool showFailMessage = false;

    private void LoginFail(BadRequestResponse resp)
    {
        failMessage = string.Join("<br/>", resp?.errors?.GeneralErrors ?? new string[] {"Login Fail"});
        showFailMessage = true;
        StateHasChanged();
    }

    private async Task ExecuteLogin(UserLoginResponse resp)
    {
        var result = await AuthService.Login(resp);

        if (result is not null)
        {
            NavManager.NavigateTo(ReturnUrl);
        }
        else
        {
            Snackbar.Add("There was an error when trying to log in", Severity.Error);
        }

        if (resp.HasToken)
        {
            loggedUser = resp;
            Snackbar.Add($"User {resp.FullName} loged in");
        }
        else
        {
            Snackbar.Add($"Oppppss!!!");
        }
    }
} *@