// <auto-generated />
using System;
using BookStore.Database.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BookStore.Database.Migrations
{
    [DbContext(typeof(BookStoreContext))]
    [Migration("20250813223133_Seeding_Users_Roles_Claims_UserRoles_UserClaims")]
    partial class Seeding_Users_Roles_Claims_UserRoles_UserClaims
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BookStore.Database.Entities.BookStores", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(3000)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(3000)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<string>("RejectionReason")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Title", "Content")
                        .IsUnique();

                    b.ToTable("BookStore");
                });

            modelBuilder.Entity("BookStore.Database.Entities.Claim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Claims");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "BookStore_Moderate",
                            Value = "100"
                        },
                        new
                        {
                            Id = 2,
                            Name = "BookStore_Delete",
                            Value = "101"
                        },
                        new
                        {
                            Id = 3,
                            Name = "BookStore_Get_Pending_List",
                            Value = "102"
                        },
                        new
                        {
                            Id = 4,
                            Name = "BookStore_Update",
                            Value = "103"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Author_Update_Profile",
                            Value = "104"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Author_Get_Own_List",
                            Value = "200"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Author_Save_Own",
                            Value = "201"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Author_Update_Own_Profile",
                            Value = "202"
                        },
                        new
                        {
                            Id = 9,
                            Name = "user_reads",
                            Value = "301"
                        });
                });

            modelBuilder.Entity("BookStore.Database.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BookStoresId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("DateAdded")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NickName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BookStoresId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("BookStore.Database.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Author"
                        },
                        new
                        {
                            Id = 3,
                            Name = "User"
                        });
                });

            modelBuilder.Entity("BookStore.Database.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("DateOfBirth")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Email", "Password")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateOfBirth = new DateTimeOffset(new DateTime(1985, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "full.access@article.ie",
                            FirstName = "Full",
                            LastName = "Access",
                            Password = "hashed-password-1"
                        },
                        new
                        {
                            Id = 2,
                            DateOfBirth = new DateTimeOffset(new DateTime(1985, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "admin.test@article.ie",
                            FirstName = "Admin",
                            LastName = "Test",
                            Password = "hashed-password-2"
                        },
                        new
                        {
                            Id = 3,
                            DateOfBirth = new DateTimeOffset(new DateTime(1985, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "author.test@article.ie",
                            FirstName = "Author",
                            LastName = "Test",
                            Password = "hashed-password-3"
                        },
                        new
                        {
                            Id = 4,
                            DateOfBirth = new DateTimeOffset(new DateTime(1985, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "user.test@article.ie",
                            FirstName = "User",
                            LastName = "Test",
                            Password = "hashed-password-4"
                        });
                });

            modelBuilder.Entity("BookStore.Database.Entities.UserClaim", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("ClaimId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "ClaimId");

                    b.HasIndex("ClaimId");

                    b.HasIndex("UserId", "ClaimId")
                        .IsUnique();

                    b.ToTable("UserClaims");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            ClaimId = 1
                        },
                        new
                        {
                            UserId = 1,
                            ClaimId = 2
                        },
                        new
                        {
                            UserId = 1,
                            ClaimId = 3
                        },
                        new
                        {
                            UserId = 1,
                            ClaimId = 4
                        },
                        new
                        {
                            UserId = 1,
                            ClaimId = 5
                        },
                        new
                        {
                            UserId = 1,
                            ClaimId = 6
                        },
                        new
                        {
                            UserId = 1,
                            ClaimId = 7
                        },
                        new
                        {
                            UserId = 1,
                            ClaimId = 8
                        },
                        new
                        {
                            UserId = 1,
                            ClaimId = 9
                        },
                        new
                        {
                            UserId = 2,
                            ClaimId = 1
                        },
                        new
                        {
                            UserId = 2,
                            ClaimId = 2
                        },
                        new
                        {
                            UserId = 2,
                            ClaimId = 3
                        },
                        new
                        {
                            UserId = 2,
                            ClaimId = 4
                        },
                        new
                        {
                            UserId = 3,
                            ClaimId = 5
                        },
                        new
                        {
                            UserId = 3,
                            ClaimId = 6
                        },
                        new
                        {
                            UserId = 3,
                            ClaimId = 7
                        },
                        new
                        {
                            UserId = 3,
                            ClaimId = 8
                        },
                        new
                        {
                            UserId = 4,
                            ClaimId = 9
                        });
                });

            modelBuilder.Entity("BookStore.Database.Entities.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId", "RoleId")
                        .IsUnique();

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 4,
                            RoleId = 3
                        });
                });

            modelBuilder.Entity("BookStore.Database.Entities.Comment", b =>
                {
                    b.HasOne("BookStore.Database.Entities.BookStores", null)
                        .WithMany("Comments")
                        .HasForeignKey("BookStoresId");
                });

            modelBuilder.Entity("BookStore.Database.Entities.UserClaim", b =>
                {
                    b.HasOne("BookStore.Database.Entities.Claim", "Claim")
                        .WithMany("UserClaims")
                        .HasForeignKey("ClaimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookStore.Database.Entities.User", "User")
                        .WithMany("UserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Claim");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BookStore.Database.Entities.UserRole", b =>
                {
                    b.HasOne("BookStore.Database.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookStore.Database.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BookStore.Database.Entities.BookStores", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("BookStore.Database.Entities.Claim", b =>
                {
                    b.Navigation("UserClaims");
                });

            modelBuilder.Entity("BookStore.Database.Entities.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("BookStore.Database.Entities.User", b =>
                {
                    b.Navigation("UserClaims");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
